generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Adventure {
  id               String    @id @default(uuid())
  creatorId        String
  createdBy        String
  createdAt        DateTime  @default(now())
  deletedAt        DateTime?
  name             String    @default("Untitled Adventure")
  description      String    @default("No description provivded.")
  agentVersion     String    @default("ai-adventure")
  shortDescription String    @default("An exciting adventure driven by AI")
  image            String?   @default("")
  agentConfig      Json?
  agentDevConfig   Json?
  devAgentId       Int?      @unique
  devAgent         Agents?   @relation("devAgentRelation", fields: [devAgentId], references: [id])

  // Used for generating a full adventure - the state will be `generating` and the `stateTaskId` will be the
  // ID of the task that represents the completion of the generation process.
  state          String?
  stateTaskId    String?
  stateUpdatedAt DateTime?

  // Whether to feature
  featured Boolean @default(false)

  // Whether it's visible by others
  public          Boolean @default(false)
  publicRequested Boolean @default(false)

  tags              String[]            @default([])
  Agents            Agents[]            @relation("agents")
  CharacterTemplate CharacterTemplate[]
  updatedAt         DateTime            @default(now()) @updatedAt
  Reactions         Reactions[]
  Comment           Comment[]

  AvailableAgents AvailableAgents[] @relation("availableAgents")

  version Int @default(0)
}

model Comment {
  id          Int       @id @default(autoincrement())
  adventureId String
  userId      String
  comment     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Adventure   Adventure @relation(fields: [adventureId], references: [id])
}

model CharacterTemplate {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Adventure   Adventure? @relation(fields: [adventureId], references: [id])
  adventureId String?
}

model Agents {
  id                       Int        @id @default(autoincrement())
  ownerId                  String
  agentUrl                 String
  handle                   String     @default("agent")
  agentVersion             String?    @default("")
  createdAt                DateTime   @default(now())
  Adventure                Adventure? @relation("agents", fields: [adventureId], references: [id])
  adventureId              String?
  isDevelopment            Boolean?   @default(false)
  DevAdventure             Adventure? @relation("devAgentRelation")
  workspaceId              String?
  workspaceHandle          String?
  completeOnboardingCalled Boolean?
  adventureVersion         Int        @default(0)
}

// These agents are pre-created and available for use.
// They are not owned by any user -- instead they are taken over from a user and turned into an Agent row.
// These agents may only be taken over if they are in the `ready` state.
model AvailableAgents {
  id                       Int        @id @default(autoincrement())
  agentUrl                 String?
  handle                   String?    @default("agent")
  agentVersion             String?    @default("")
  createdAt                DateTime   @default(now())
  Adventure                Adventure? @relation("availableAgents", fields: [adventureId], references: [id])
  adventureId              String?
  gameState                String?
  isDevelopment            Boolean?   @default(false)
  state                    String?    @default("waiting") // waiting | creating | ready | claimed
  workspaceId              String?
  workspaceHandle          String?
  completeOnboardingCalled Boolean?
  adventureVersion         Int        @default(0)
}

model UserExperience {
  id         Int      @id @default(autoincrement())
  userId     String
  type       String
  expId      String
  experience Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, type, expId])
}

model UserEnergy {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  energy    Int      @default(100)
  energyMax Int      @default(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserApprovals {
  id         Int     @id @default(autoincrement())
  userId     String  @unique
  isApproved Boolean @default(false)
}

model Subscriptions {
  id             Int      @id @default(autoincrement())
  ownerId        String   @unique
  stripeId       String
  priceId        String
  subscriptionId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model TopUps {
  id              Int      @id @default(autoincrement())
  ownerId         String
  amountPaidCents Int // Amount paid
  creditIncrease  Int // Energy Added
  reference       String // Stripe reference
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DrawDowns {
  id             Int      @id @default(autoincrement())
  ownerId        String
  creditDecrease Int // Energy Removed
  reference      String // Stripe reference
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Emojis {
  id          Int         @id @default(autoincrement())
  emoji       String      @unique
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Reactions   Reactions[]
}

model Reactions {
  id          Int       @id @default(autoincrement())
  emojiId     Int
  userId      String
  adventureId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Emojis      Emojis    @relation(fields: [emojiId], references: [id])
  Adventure   Adventure @relation(fields: [adventureId], references: [id])

  @@unique([userId, emojiId, adventureId])
}
